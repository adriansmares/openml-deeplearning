.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_mxnet_mxnet_sequential_regression_model.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_mxnet_mxnet_sequential_regression_model.py:


MXNet sequential regression model example
==================

An example of a sequential network that solves a regression task used as an OpenML flow.


.. code-block:: default


    import mxnet
    import mxnet.gluon

    import openml
    import openml.extensions.mxnet

    import logging


Enable logging in order to observe the progress while running the example.


.. code-block:: default

    openml.config.logger.setLevel(logging.DEBUG)
    openml.extensions.mxnet.config.logger.setLevel(logging.DEBUG)

Define a HybridSequential container


.. code-block:: default

    model = mxnet.gluon.nn.HybridSequential()

Add the layers to the HybridSequential container


.. code-block:: default

    with model.name_scope():
        model.add(mxnet.gluon.nn.BatchNorm())
        model.add(mxnet.gluon.nn.Dense(units=1024, activation="relu"))
        model.add(mxnet.gluon.nn.Dropout(rate=0.4))
        model.add(mxnet.gluon.nn.Dense(units=512, activation="relu"))
        model.add(mxnet.gluon.nn.Dropout(rate=0.4))
        model.add(mxnet.gluon.nn.Dense(units=256, activation="relu"))
        model.add(mxnet.gluon.nn.Dropout(rate=0.4))
        model.add(mxnet.gluon.nn.Dense(units=128, activation="relu"))
        model.add(mxnet.gluon.nn.Dropout(rate=0.4))
        model.add(mxnet.gluon.nn.Dense(units=64, activation="relu"))
        model.add(mxnet.gluon.nn.Dropout(rate=0.4))
        model.add(mxnet.gluon.nn.Dense(units=1, activation="relu"))

Enable hybrid execution


.. code-block:: default

    model.hybridize()

Retrieve the credit_g classification task from OpenML


.. code-block:: default

    task = openml.tasks.get_task(2295)

Run the model on the task (requires an API key).


.. code-block:: default

    run = openml.runs.run_model_on_task(model, task, avoid_duplicate_runs=False)
    # Publish the run on OpenML
    run.publish()

    print('URL for run: %s/run/%d' % (openml.config.server, run.run_id))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_mxnet_mxnet_sequential_regression_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: mxnet_sequential_regression_model.py <mxnet_sequential_regression_model.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: mxnet_sequential_regression_model.ipynb <mxnet_sequential_regression_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
